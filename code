#include <iostream>
#include<time.h>

using namespace std;
void iNsert(int  p[] , int *i, int* n);

int BirthDay(int * p ,int* month , int* day , int* I , int* n , int* flag );
int main()
{
    double start = clock();
    int i=0 ;
    int I =0 ;
    int flag=0 ;
    int Day=0 , Month =0 ;
//   size
    int  n=0 ;  // ... 1
   cout << "enter n \n";
    cin >> n;  // ... 1
//  Array of pieces
   int arr[n]; // ... 1
 if (n >=1 && n <= 100) // ... 1
    iNsert(arr,&i,&n);   // ... 1


   cout << "enter day and month \n";
   cin >>Day>>Month ; // ... 1
  bool d = Day >=1 && Day <= 31 ; // ... 1
  bool m =Month >= 1 && Month <= 12 ; // ... 1

  if (d && m){ // ... 1
/// the function which solves the problems


cout<< BirthDay(arr , &Month ,  &Day ,  &I ,  &n ,  &flag )<<"\n"; // ... 1
}
//double finsh = clock();
////cout << " the time = " << finsh-start << endl ;


}
void iNsert(int* p ,int *i ,int* n)
{


     cin>>p[(*i)];   // ... 1
    if(p[(*i)]>=1 &&p[(*i)]<=5)  // ... 1
        ++(*i);           // ... 1

    if ((*i)<(*n))  // ... 1
        iNsert(p,i,n); // ... 1

}
int BirthDay(int * p ,int* month , int* day , int* I , int* n , int* flag )
{

     if((*month) > (*n))
        return 0;
    int  sum =0; // ... 1
    switch((*month))   // ... 1
    {
        case 1 :
          sum = p[(*I)];
          break;
        case 2 :
          sum = p[(*I)]+p[(*I)+1];
           break;
        case 3 :
          sum =p[(*I)]+p[(*I)+1] +p[(*I)+2];
          break;
       case 4 :
          sum = p[(*I)]+p[(*I)+1] +p[(*I)+2]+p[(*I)+3];
          break;
        case 5 :
          sum = p[(*I)]+p[(*I)+1] +p[(*I)+2]+p[(*I)+3]+p[(*I)+4];
          break;
        case 6 :
          sum = p[(*I)]+p[(*I)+1] +p[(*I)+2]+p[(*I)+3]+p[(*I)+4]+p[(*I)+5];
          break;
        case 7 :
          sum = p[(*I)]+p[(*I)+1] +p[(*I)+2]+p[(*I)+3]+p[(*I)+4]+p[(*I)+5]+p[(*I)+6];
          break;
        case 8 :
          sum = p[(*I)]+p[(*I)+1] +p[(*I)+2]+p[(*I)+3]+p[(*I)+4]+p[(*I)+5]+p[(*I)+6]+p[(*I)+7];
          break;
        case 9 :
          sum = p[(*I)]+p[(*I)+1]+p[(*I)+2]+p[(*I)+3]+p[(*I)+4]+p[(*I)+5]+p[(*I)+6]+p[(*I)+7]+p[(*I)+8];
          break;
        case 10 :
          sum = p[(*I)]+p[(*I)+1] +p[(*I)+2]+p[(*I)+3]+p[(*I)+4]+p[(*I)+5]+p[(*I)+6]+p[(*I)+7]+p[(*I)+8]+p[(*I)+9];
          break;
        case 11 :
          sum = p[(*I)]+p[(*I)+1] +p[(*I)+2]+p[(*I)+3]+p[(*I)+4]+p[(*I)+5]+p[(*I)+6]+p[(*I)+7]+p[(*I)+8]+p[(*I)+9]+p[(*I)+10];
          break;
        case 12 :
          sum = p[(*I)]+p[(*I)+1] +p[(*I)+2]+p[(*I)+3]+p[(*I)+4]+p[(*I)+5]+p[(*I)+6]+p[(*I)+7]+p[(*I)+8]+p[(*I)+9]+p[(*I)+10]+p[(*I)+11];
          break;
    }
    if (sum==(*day))
        ++(*flag);

    if (((*I)+1)>=(*n))
        return (*flag) ;
       ++(*I);
  return  BirthDay(p,month,day,I,n,flag);
}
